<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:synchronize="http://www.mulesoft.org/schema/mule/synchronize"
	xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:mock="http://www.mulesoft.org/schema/mule/mock" 
    xmlns="http://www.mulesoft.org/schema/mule/core" 
    xmlns:db="http://www.mulesoft.org/schema/mule/db" 
    xmlns:vm="http://www.mulesoft.org/schema/mule/vm" 
    xmlns:munit="http://www.mulesoft.org/schema/mule/munit" 
    xmlns:dbserver="http://www.mulesoft.org/schema/mule/dbserver" 
    xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" 
    xmlns:spring="http://www.springframework.org/schema/beans" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.mulesoft.org/schema/mule/synchronize http://www.mulesoft.org/schema/mule/synchronize/current/mule-synchronize.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
http://www.mulesoft.org/schema/mule/dbserver http://www.mulesoft.org/schema/mule/dbserver/current/mule-dbserver.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
http://www.mulesoft.org/schema/mule/mock http://www.mulesoft.org/schema/mule/mock/current/mule-mock.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd">
        
    <munit:config mock-connectors="false" mock-inbounds="false" name="munit" doc:name="MUnit configuration"/>
    <spring:beans>
        <spring:import resource="classpath:insert_update_employee.xml"/>
    </spring:beans>
    <dbserver:config name="DB_Server" database="DATABASE_NAME" sqlFile="jdbc/ddl.sql" doc:name="DB Server"/>
    <munit:before-test name="before-test-clean-and-reload-tables" description="clean and reload tables">
        <dbserver:execute config-ref="DB_Server" sql="#[getResource('jdbc/clean-tables.sql').asString()]" doc:name="clean up data"/>
    </munit:before-test>
    <munit:before-suite name="employee-salary-functional-testsBefore_Suite" description="MUnit Test">
        <dbserver:start-db-server config-ref="DB_Server" doc:name="startServer"/>
    </munit:before-suite>
    <munit:test name="validate-query-employees-table" description="MUnit Test">
        <dbserver:validate-that config-ref="DB_Server" query="SELECT * FROM employees WHERE emp_no=10001;" returns="&quot;EMP_NO&quot;,&quot;BIRTH_DATE&quot;,&quot;FIRST_NAME&quot;,&quot;LAST_NAME&quot;,&quot;GENDER&quot;,&quot;HIRE_DATE&quot;\n&quot;10001&quot;,&quot;02-Sep-1973&quot;,&quot;George&quot;,&quot;Johnson&quot;,&quot;M&quot;,&quot;26-Jun-2012&quot;" doc:name="validateQuery"/>
    </munit:test>

    <munit:test name="shouldInsertEmployeeAndSalary" description="MUnit Test">
        <munit:set payload="#[getResource('goodEmployeeAndSalary.json').asString()]" doc:name="Set Message"/>
        <flow-ref name="employee-service" doc:name="employee-service"/>
        <dbserver:validate-that config-ref="DB_Server" query="SELECT * FROM employees where last_name = 'Norris';" returns="&quot;EMP_NO&quot;,&quot;BIRTH_DATE&quot;,&quot;FIRST_NAME&quot;,&quot;LAST_NAME&quot;,&quot;GENDER&quot;,&quot;HIRE_DATE&quot;\n&quot;10002&quot;,&quot;10-Mar-1940&quot;,&quot;Chuck&quot;,&quot;Norris&quot;,&quot;M&quot;,&quot;09-Mar-1940&quot;" doc:name="validateQuery: verify in employee table"/>
        <dbserver:validate-that config-ref="DB_Server" query="SELECT * FROM salary_history where salary_id = 4" returns="&quot;SALARY_ID&quot;,&quot;EMP_NO&quot;,&quot;SALARY&quot;,&quot;FROM_DATE&quot;,&quot;TO_DATE&quot;\n&quot;4&quot;,&quot;10002&quot;,&quot;99999999&quot;,&quot;09-Mar-1940&quot;,&quot;28-May-2999&quot;" doc:name="validateQuery: verify in salary table"/>
    </munit:test>
    <munit:test name="shouldNotInsertEmployeeIfInsertSalaryFails" description="MUnit Test">
        <munit:set payload="#[getResource('goodEmployeeBadSalary.json').asString()]" doc:name="Set Message"/>
        <flow-ref name="employee-service" doc:name="employee-service"/>
        <dbserver:validate-that config-ref="DB_Server" query="SELECT * FROM employees where last_name = 'Norris';" returns="&quot;EMP_NO&quot;,&quot;BIRTH_DATE&quot;,&quot;FIRST_NAME&quot;,&quot;LAST_NAME&quot;,&quot;GENDER&quot;,&quot;HIRE_DATE&quot;" doc:name="validateQuery: old record updated"/>
    </munit:test>
    <munit:test name="update-salary-subflow-test" description="MUnit Test">
        <munit:set payload="#[getResource('updateSalaryTest.json').asString()]" doc:name="Set Message: good data"/>
        <json:json-to-object-transformer doc:name="JSON to Object" returnClass="java.util.Map"/>
        <flow-ref name="insert-or-update-salary" doc:name="insert-or-update-salary"/>
        <dbserver:validate-that config-ref="DB_Server" query="SELECT * FROM salary_history WHERE salary_id = 1;" returns="&quot;SALARY_ID&quot;,&quot;EMP_NO&quot;,&quot;SALARY&quot;,&quot;FROM_DATE&quot;,&quot;TO_DATE&quot;\n&quot;1&quot;,&quot;10001&quot;,&quot;85097&quot;,&quot;22-Jun-2014&quot;,&quot;28-May-2016&quot;" doc:name="validateQuery: old record updated"/>
    </munit:test>
    <munit:test name="insert-new-employee-subflow-test" description="MUnit Test">
    	<munit:set payload="#[getResource('good_insert_employee_only.json').asStream()]" doc:name="Set Message: bad data"/>
        <json:json-to-object-transformer returnClass="java.util.Map" doc:name="JSON to Object"/>
        <flow-ref name="insert-or-update-employee" doc:name="insert-or-update-employee"/>
        <dbserver:validate-that config-ref="DB_Server" query="SELECT count(*) from employees" returns="&quot;COUNT(*)&quot;\n&quot;2&quot;" doc:name="validateQuery: employee record count"/>
    	<dbserver:validate-that config-ref="DB_Server" query="SELECT * from employees order by emp_no" returns="&quot;EMP_NO&quot;,&quot;BIRTH_DATE&quot;,&quot;FIRST_NAME&quot;,&quot;LAST_NAME&quot;,&quot;GENDER&quot;,&quot;HIRE_DATE&quot;\n&quot;10001&quot;,&quot;02-Sep-1973&quot;,&quot;George&quot;,&quot;Johnson&quot;,&quot;M&quot;,&quot;26-Jun-2012&quot;\n&quot;10002&quot;,&quot;10-Mar-1940&quot;,&quot;Chuck&quot;,&quot;Norris&quot;,&quot;M&quot;,&quot;09-Mar-1940&quot;" doc:name="validateQuery: employee records"/>
    </munit:test>
    <munit:test name="update-employee-subflow-test" description="MUnit Test">
        <munit:set payload="#[getResource('good_update_employee_only.json').asString()]" doc:name="Set Message: good_update_employee_only.json'"/>
        <json:json-to-object-transformer doc:name="JSON to Object" returnClass="java.util.Map"/>
        <flow-ref name="insert-or-update-employee" doc:name="insert-or-update-employee"/>
        <dbserver:validate-that config-ref="DB_Server" query="SELECT * from employees" returns="&quot;EMP_NO&quot;,&quot;BIRTH_DATE&quot;,&quot;FIRST_NAME&quot;,&quot;LAST_NAME&quot;,&quot;GENDER&quot;,&quot;HIRE_DATE&quot;\n&quot;10001&quot;,&quot;10-Mar-1940&quot;,&quot;Chuck&quot;,&quot;Norris&quot;,&quot;M&quot;,&quot;09-Mar-1940&quot;" doc:name="validateQuery: count records to verify none were added"/>
    </munit:test>
    <munit:after-suite name="employee-salary-functional-testsAfter_Suite" description="Ater suite actions">
        <dbserver:stop-db-server config-ref="DB_Server" doc:name="stopServer"/>
    </munit:after-suite>
</mule>
